'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports.useAmbientTRenderEngine = useAmbientTRenderEngine;
exports.default = TRenderEngineProvider;

var _react = _interopRequireDefault(require('react'));

var _reactNative = require('react-native');

var _useTRenderEngine = _interopRequireDefault(require('./hooks/useTRenderEngine'));

var _defaultSystemFonts = _interopRequireDefault(require('./defaultSystemFonts'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const defaultTRenderEngine = {};

const TRenderEngineContext = /*#__PURE__*/ _react.default.createContext(defaultTRenderEngine);

const defaultFallbackFonts = {
  'sans-serif': _reactNative.Platform.select({
    ios: 'system',
    default: 'sans-serif',
  }),
  monospace: _reactNative.Platform.select({
    ios: 'Menlo',
    default: 'monospace',
  }),
  serif: _reactNative.Platform.select({
    ios: 'Times New Roman',
    default: 'serif',
  }),
};
exports.defaultFallbackFonts = defaultFallbackFonts;
const defaultTRenderEngineProviderProps = {
  htmlParserOptions: {
    decodeEntities: true,
  },
  emSize: 14,
  ignoredDomTags: [],
  ignoredStyles: [],
  baseStyle: {
    fontSize: 14,
  },
  tagsStyles: {},
  classesStyles: {},
  enableUserAgentStyles: true,
  enableCSSInlineProcessing: true,
  customHTMLElementModels: {},
  fallbackFonts: defaultFallbackFonts,
  systemFonts: _defaultSystemFonts.default,
};
/**
 * Use the ambient transient render engine.
 *
 * @returns The ambient transient render engine.
 *
 * @public
 */

exports.defaultTRenderEngineProviderProps = defaultTRenderEngineProviderProps;

function useAmbientTRenderEngine() {
  const engine = _react.default.useContext(TRenderEngineContext);

  if (typeof __DEV__ === 'boolean' && __DEV__ && engine === defaultTRenderEngine) {
    console.error('TRenderEngineProvider is missing in the render tree.');
  }

  return engine;
}
/**
 * A react component to share a {@link TRenderEngine} instance across different
 * rendered contents via {@link RenderHTMLSource}. This can significantly enhance
 * performance in applications with potentially dozens or hundreds of distinct
 * rendered snippets such as chat apps.
 *
 * @param props - Pass engine config here.
 */

function TRenderEngineProvider({ children, ...config }) {
  config = {
    ...defaultTRenderEngineProviderProps,
    ...config,
  };
  const engine = (0, _useTRenderEngine.default)(config);
  return /*#__PURE__*/ _react.default.createElement(
    TRenderEngineContext.Provider,
    {
      value: engine,
    },
    children
  );
}
